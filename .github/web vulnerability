import requests
from bs4 import BeautifulSoup
import json
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)  # Disable SSL warnings

# Common payloads for XSS and SQLi
XSS_PAYLOADS = ["<script>alert('XSS')</script>", "'\"><script>alert(1)</script>"]
SQLI_PAYLOADS = ["' OR '1'='1", "admin' --", "' UNION SELECT 1,2,3 --"]

# Function to scan forms
def get_forms(url):
    """Extracts all forms from a web page."""
    response = requests.get(url, verify=False)
    soup = BeautifulSoup(response.text, "html.parser")
    return soup.find_all("form")

# Function to test XSS
def test_xss(url, report):
    """Tests if the web page is vulnerable to XSS."""
    forms = get_forms(url)
    vulnerable = "No"
    for form in forms:
        action = form.attrs.get("action", "").lower()
        method = form.attrs.get("method", "get").lower()
        inputs = form.find_all("input")
        
        for payload in XSS_PAYLOADS:
            data = {input_tag.get("name", "test"): payload for input_tag in inputs}
            full_url = url + action if action else url
            if method == "post":
                response = requests.post(full_url, data=data, verify=False)
            else:
                response = requests.get(full_url, params=data, verify=False)
            
            if payload in response.text:
                vulnerable = "Yes"
                report["XSS"].append(full_url)
                break
    print(f"XSS Vulnerability: {vulnerable}")

# Function to test SQL Injection
def test_sqli(url, report):
    """Tests if the web page is vulnerable to SQL Injection."""
    forms = get_forms(url)
    vulnerable = "No"
    for form in forms:
        action = form.attrs.get("action", "").lower()
        method = form.attrs.get("method", "get").lower()
        inputs = form.find_all("input")
        
        for payload in SQLI_PAYLOADS:
            data = {input_tag.get("name", "test"): payload for input_tag in inputs}
            full_url = url + action if action else url
            if method == "post":
                response = requests.post(full_url, data=data, verify=False)
            else:
                response = requests.get(full_url, params=data, verify=False)
            
            if "error" in response.text.lower() or "mysql" in response.text.lower():
                vulnerable = "Yes"
                report["SQLi"].append(full_url)
                break
    print(f"SQL Injection Vulnerability: {vulnerable}")

# Function to check for CSRF vulnerabilities
def test_csrf(url, report):
    """Checks if the form has anti-CSRF tokens."""
    forms = get_forms(url)
    vulnerable = "No"
    for form in forms:
        inputs = form.find_all("input")
        has_token = any("csrf" in input_tag.get("name", "").lower() for input_tag in inputs)
        
        if not has_token:
            vulnerable = "Yes"
            report["CSRF"].append(url)
    print(f"CSRF Vulnerability: {vulnerable}")

# Function to generate a report
def generate_report(report, filename="vulnerability_report.json"):
    """Saves the vulnerability report as a JSON file."""
    with open(filename, "w") as f:
        json.dump(report, f, indent=4)
    print(f"Report saved as {filename}")

# Main function
def main():
    target_url = input("Enter the target URL (including http/https): ")
    report = {"XSS": [], "SQLi": [], "CSRF": []}
    
    test_xss(target_url, report)
    test_sqli(target_url, report)
    test_csrf(target_url, report)
    
    generate_report(report)

if __name__ == "__main__":
    main()
